Name: Joseph Picchi
UID:  605124511

CS 161 HOMEWORK 1:
==================

QUESTION 1:

--> When testing my program on the first 10 Padovan numbers, my function returns the following:
    (PAD 0) --> 1
    (PAD 1) --> 1
    (PAD 2) --> 1
    (PAD 3) --> 2
    (PAD 4) --> 2
    (PAD 5) --> 3
    (PAD 6) --> 4
    (PAD 7) --> 5
    (PAD 8) --> 7
    (PAD 9) --> 9
    (PAD 10) --> 12

--> For larger values of N:
    For N=0,1,...,50, there was no noticable delay in the computation (PAD N).

    However, for N=60,70,80,... the computation of (PAD N) took an increasingly long amount of
    time. (PAD 60) took about 1 second, (PAD 70) took about 4 seconds, and (PAD 80) took about
    1 minute to return its output.

    This makes sense because the recursive nature of the PAD function causes the runtime to
    increase exponentially as N increases. Since each PAD(N) call recursively calls PAD(N-2)
    and PAD(N-3), the runtime of PAD(N) is approximately the sum of the runtimes of PAD(N-2)
    and PAD(N-3). Thus, the runtime of PAD(N) is more than double the runtime of PAD(N-2). i.e.
    the runtime of PAD(N) increases exponentially as N increases. We could avoid this issue using
    dynamic programming with memoization, since recursion is the cause of the poor time
    complexity.


QUESTION 2:

--> When testing my program on the first 10 values, my function returns the following:
    (SUMS 0) --> 0
    (SUMS 1) --> 0
    (SUMS 2) --> 0
    (SUMS 3) --> 1
    (SUMS 4) --> 1
    (SUMS 5) --> 2
    (SUMS 6) --> 3
    (SUMS 7) --> 4
    (SUMS 8) --> 6
    (SUMS 9) --> 8
    (SUMS 10) --> 11

--> The relationship between the values returned by PAD and SUMS:
    PAD(N) = SUMS(N) + 1

    We can prove this by strong induction:
       1. Base case:
       	  1.1. By definition, Pad(0)=PAD(1)=PAD(2)=1
	  1.2. Since PAD(0), PAD(1), and PAD(2) are given defined values, they require no
	       sums to compute (since the PAD function simply returns 1 if it sees that
	       N=0,1,2
	  1.3. By (1.2), SUMS(0)=SUMS(1)=SUMS(2)=0
	  1.4. By (1.1) and (1.3),
	       	  PAD(0)=SUMS(0)+1
		  PAD(1)=SUMS(1)+1
		  PAD(2)=SUMS(2)+1
	  1.5. Therefore, we've proven the base case
       2. Inductive step:
       	  2.1. By definition of the PAD code, PAD(N) = PAD(N-2) + PAD(N-3)
	  2.2. By the inductive hypothesis,
	       PAD(N-2)=SUMS(N-2)+1
	       PAD(N-3)=SUMS(N-3)+1
	  2.3. The number of sums to compute PAD(N) is the number of sums to compute PAD(N-2)
	       plus the number of sums to compute PAD(N-3) plus 1 to add the values PAD(N-2)
	       and PAD(N-3) together. i.e.
	       SUMS(N) = SUMS(N-2) + SUMS(N-3) + 1
	  2.4. By (2.1)-(2.3),
	       PAD(N) = PAD(N-2) + PAD(N-3)
		      = SUMS(N-2)+1 + SUMS(N-3)+1
	       	      = SUMS(N-2)+SUMS(N-3)+1 + 1
		      = SUMS(N) + 1
	  2.5. By (2.4), we have proven the inductive step
       3. By (1) and (2), we have proven that
       	  PAD(N) = SUMS(N) + 1

    Intuitively, this makes sense because Pad(0)=PAD(1)=PAD(2)=1 by definition. Thus,
    SUMS(0)=SUMS(1)=SUMS(2)=0 because the PAD code simply returns 1 if it sees that N=1,2,3 and
    performs 0 sum operations.
    
    For all N, SUMS(N) = SUMS(N-2) + SUMS(N-3) + 1 because the number of sums to get PAD(N) is
    equivalent to the number of sums to get PAD(N-2) plus the number of sums to get PAD(N-3)
    plus 1 additional sum to add PAD(N-2) and PAD(N-3) together.

    The recrsuive step demonstrates that, given that all prior values of N satisfied
    PAD(N) = SUMS(N) + 1, the next value of N will satisfy the same property. Therefore,
    we proved the claim by induction.


QUESTION 3:

--> testing the function on the inputs given in the spec yields the correct results:
    (ANON ’42) --> ?
    (ANON ’FOO) --> ?
    (ANON ’(((L E) F) T)) --> (((? ?) ?) ?)
    (ANON ’(5 FOO 3.1 -0.2)) --> (? ? ? ?)
    (ANON ’(1 (FOO 3.1) -0.2)) --> (? (? ?) ?)
    (ANON ’(((1 2) (FOO 3.1)) (BAR -0.2))) --> (((? ?) (? ?)) (? ?))
    (ANON ’(R (I (G (H T))))) --> (? (? (? (? ?))))
